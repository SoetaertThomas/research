---
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Skateboard configurator</title>
    <style>
      .templates {
        position: fixed;
        top: 90%;
        transform: translate(-50%, -50%);
        left: 50%;
        background-color: white;
        padding: 1rem;
        border-radius: 0.5rem;
      }

      .button {
        background-color: black; /* Green */
        border: none;
        color: white;
        padding: 2rem 2rem;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 0.5rem;
        font-weight: bold;
      }

      .button:hover {
        background-color: rgb(98, 2, 2);
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <h1>Skateboard configurator</h1>
    <div class="templates">
      <button id="template1" class="button">skateboard 1</button>
      <button id="template2" class="button">skateboard 2</button>
      <button id="template3" class="button">skateboard 3</button>
      <button id="save" class="button">save</button>
    </div>
    <div class="" id="presets"></div>
    <canvas class="webgl"></canvas>
  </body>
</html>
<script>
  import * as THREE from 'three'
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'
  import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'
  import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'
  import { GUI } from 'dat.gui'

  var scene = new THREE.Scene()

  const canvas = document.querySelector('canvas.webgl')

  var camera = new THREE.PerspectiveCamera(
    60,
    window.innerWidth / window.innerHeight,
    1,
    1000,
  )
  camera.position.set(2, 3, 5)
  camera.lookAt(scene.position)

  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    alpha: true,
  })

  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight,
  }

  renderer.shadowMap.enabled = true
  renderer.shadowMap.type = THREE.PCFSoftShadowMap
  renderer.setSize(sizes.width, sizes.height)
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
  renderer.setClearColor('#ADD8E6', 0.5)

  document.body.appendChild(canvas)

  const controls = new OrbitControls(camera, canvas)
  controls.target.set(0, 0, 0)
  controls.rotateSpeed = 10
  controls.enableDamping = true
  controls.enableZoom = true
  controls.autoRotate = true
  controls.update()

  const gui = new GUI()
  //   var img = {
  //     changeImage: function () {
  //       console.log('clicked')
  //       let click = document.querySelector('.click')
  //       let input = document.createElement('button')
  //       input.id = 'modal1-trigger'
  //       click.appendChild(input)
  //       console.log(input)
  //       input.click()
  //       //   input.onchange = () => {
  //       //     // you can use this method to get file and perform respective operations
  //       //     let url = input.value
  //       //     console.log(url)
  //       //     new THREE.TextureLoader().load(url, (texture) => {
  //       //       //Update Texture
  //       //       materials[0].map = texture
  //       //       materials[0].needsUpdate = true
  //       //     })
  //       //   }
  //     },
  //   }
  const options = {
    Deck: 0x00ff00,
    Wheels: 0x00ff00,
  }
  gui.addColor(options, 'Wheels').onChange((e) => {
    materials[6].color.set(e)
  })

  // gui.add(img, 'changeImage').name('change image')
  const params = {
    textField: 'image url',
  }
  let url = ''

  gui
    .add(params, 'textField')
    .name('Deck art')
    .onFinishChange(function (value) {
      url = value
      console.log(url)
      new THREE.TextureLoader().load(url, (texture) => {
        //Update Texture
        materials[0].map = texture
        materials[0].needsUpdate = true
      })
    })

  gui.addColor(options, 'Deck').onChange((e) => {
    materials[0].color.set(e)
  })

  const dracolader = new DRACOLoader()
  dracolader.setDecoderPath('../draco/')

  const gltfLoader = new GLTFLoader()
  gltfLoader.setDRACOLoader(dracolader)

  const materials = []

  gltfLoader.load('../../public/model/skateboard/scene.gltf', (gltf) => {
    const scenexx = gltf.scene

    scenexx.traverse(function (object) {
      if (object.material) materials.push(object.material)
      //console.log(materials)
    })
    gltf.scene.scale.set(0.75, 0.75, 0.75)
    scene.add(gltf.scene)
  })

  const ambientLight = new THREE.AmbientLight(0xf0f2d4, 0.8)
  scene.add(ambientLight)

  //controls.update() must be called after any manual changes to the camera's transform

  const save = document.querySelector('#save')
  save.addEventListener('click', () => {
    console.log('save')
    saveLocalStorage()
    clickEvent()
  })

  const clickEvent = () => {
    let presets = document.querySelectorAll('.preset')
    if (presets) {
      console.log(presets)
      for (let index = 0; index < presets.length; index++) {
        let element = presets[index]
        console.log(element)
        element.addEventListener('click', () => {
          let localPreset = localStorage.getItem(element.getAttribute('id'))
          localPreset = JSON.parse(localPreset)
          console.log(localPreset)
          preset(
            localPreset.UrlImg,
            '#' + localPreset.WheelC,
            '#' + localPreset.DeckC,
          )
        })
      }
    }
  }

  const presets = document.querySelector('#presets')

  if (window.localStorage.length) {
    Object.keys(window.localStorage).forEach(function (key, index) {
      console.log(key)
      if (key[0] + key[1] === 'id') {
        const newPreset = document.createElement('button')
        newPreset.classList.add('button')
        newPreset.classList.add('preset')
        newPreset.setAttribute('id', key)
        newPreset.innerHTML = 'Preset'
        presets.appendChild(newPreset)
      }
    })
    clickEvent()
    console.log(window.localStorage)
    console.log('woppa')
  }

  const saveLocalStorage = () => {
    console.log(url)
    console.log(decimalToHexString(materials[6].color.getHex()))
    console.log(decimalToHexString(materials[0].color.getHex()))
    let uniq = 'id' + new Date().getTime()
    let dict = {
      Id: uniq,
      UrlImg: url,
      WheelC: decimalToHexString(materials[6].color.getHex()),
      DeckC: decimalToHexString(materials[0].color.getHex()),
    }
    localStorage.setItem(uniq, JSON.stringify(dict))
    const newPreset = document.createElement('button')
    newPreset.classList.add('button')
    newPreset.classList.add('preset')
    newPreset.setAttribute('id', uniq)
    newPreset.innerHTML = 'Preset'
    presets.appendChild(newPreset)

    // localStorage.setItem('url', url)
    // localStorage.setItem(
    //   'wheelcolor',
    //   decimalToHexString(materials[6].color.getHex()),
    // )
    // localStorage.setItem(
    //   'deckcolor',
    //   decimalToHexString(materials[0].color.getHex()),
    // )
  }

  const decimalToHexString = (hex) => {
    if (hex < 0) {
      hex = 0xffffffff + hex + 1
    }

    return hex.toString(16).toUpperCase()
  }

  const preset = (url, wheelcolor, deckcolor) => {
    new THREE.TextureLoader().load(url, (texture) => {
      //Update Texture
      materials[0].map = texture
      materials[0].needsUpdate = true
    })
    materials[6].color.set(wheelcolor)
    materials[0].color.set(deckcolor)
  }

  const template1 = () => {
    new THREE.TextureLoader().load(
      'https://static.vecteezy.com/ti/vecteur-libre/p1/4684690-paix-dans-graffiti-art-gratuit-vectoriel.jpg',
      (texture) => {
        //Update Texture
        materials[0].map = texture
        materials[0].needsUpdate = true
      },
    )
    materials[6].color.set(0x52a0f0)
    materials[0].color.set(0xff00b4)
  }
  const template2 = () => {
    new THREE.TextureLoader().load(
      'https://sites.create-cdn.net/siteimages/19/1/7/191789/15/9/6/15966898/1000x741.jpg?1510065961',
      (texture) => {
        //Update Texture
        materials[0].map = texture
        materials[0].needsUpdate = true
      },
    )
    materials[6].color.set(0xdcf2d6)
    materials[0].color.set(0xffffff)
  }
  const template3 = () => {
    new THREE.TextureLoader().load(
      'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRxdNIqmDF7sBA0V7GmkbElkuXFbRO-KRGUimhIWlaH7X3zZOvAjv7b3sTCZ6G0GPJsp_A&usqp=CAU',
      (texture) => {
        //Update Texture
        materials[0].map = texture
        materials[0].needsUpdate = true
      },
    )
    materials[6].color.set(0xff9500)
    materials[0].color.set(0xff0000)
  }

  const btn1 = document.querySelector('#template1')
  //console.log(btn1)
  btn1.addEventListener('click', () => {
    console.log('template1')
    template1()
  })

  const btn2 = document.querySelector('#template2')
  //console.log(btn2)
  btn2.addEventListener('click', () => {
    console.log('template2')
    template2()
  })

  const btn3 = document.querySelector('#template3')
  //console.log(btn3)
  btn3.addEventListener('click', () => {
    console.log('template3')
    template3()
  })

  const tick = () => {
    renderer.render(scene, camera)
    controls.update()

    window.requestAnimationFrame(tick)
  }
  tick()
</script>
